{"version":3,"sources":["assets/script/client.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import Axios from 'axios'\n\ninterface Achievement {\n    win_count: number,\n    lose_count: number,\n    nfts: Array<number>,\n}\n\nexport default class Client {\n    url: string;\n    privkey: string;\n    address: string;\n\n    constructor(url: string, privkey: string, address: string) {\n        this.url = url;\n        this.privkey = privkey;\n        this.address = address;\n    }\n\n    private async request(method: string, param: any): Promise<any> {\n        return await Axios.post(this.url, {\n            jsonrpc: \"2.0\", \n            method, \n            params: [param],\n            id: 1\n        }, {\n            headers: {\n                'content-type': 'application/json; charset=utf-8'\n            }\n        });\n    }\n\n    private async send_transaction(call_func: string): Promise<String> {\n        let response = await this.request('make_request_digest', {\n            sender: this.address,\n            contract_call: call_func,\n            private_key: this.privkey,\n            payment: String(20)\n        });\n        console.log(response);\n        if (response.status != 200) {\n            throw 'bad jsonrpc call';\n        }\n        return response.data.result;\n    }\n\n    // call while `claim` button clicked in achivement page\n    private async claim_nfts(): Promise<String> {\n        let global = await this.fetch_global();\n        let claimable = false;\n        for (let lock_hash of Object.keys(global.users)) {\n            let v = global.users[lock_hash];\n            claimable = v.nfts.length > 0;\n        }\n        if (claimable) {\n            return await this.send_transaction('claim_nfts()');\n        } else {\n            return 'nothing';\n        }\n    }\n\n    // call to check button status of `claim`\n    private async fetch_global(): Promise<any> {\n        let response = await this.request('fetch_global_data', {\n            address: this.address,\n        });\n        console.log(response);\n        if (response.status != 200) {\n            throw 'bad jsonrpc call';\n        }\n        return JSON.parse(response.data.result);\n    }\n\n    // call when win the battle\n    public async battle_win(): Promise<String> {\n        return await this.send_transaction('battle_win()');\n    }\n\n    // call when lose the battle\n    public async battle_lose(): Promise<String> {\n        return await this.send_transaction('battle_lose()');\n    }\n\n    public async get_achievement(): Promise<Achievement> {\n        let global = await this.fetch_global();\n        console.log('global =', global);\n        let result = { win_count: 0, lose_count: 0, nfts: [] };\n        for (let lock_hash of Object.keys(global.users)) {\n            result = global.users[lock_hash];\n        }\n        return result;\n    }\n\n    // call to fetch nfts owned by player\n    // public async fetch_nfts(): Promise<Array<NFT>> {\n    //     let hash = await this.claim_nfts();\n    //     console.log('claim_nfts hash =', hash);\n    //     let response = await this.request('fetch_personal_data', this.address);\n    //     console.log(response);\n    //     if (response.status != 200) {\n    //         throw 'bad jsonrpc call';\n    //     }\n    //     return response.data.result;\n    // }\n}\n\n/**\n * FOR EXAMPLES\n * \n *  let client = new Client(\n *      'http://127.0.0.1:8090',\n *      '0x8d929e962f940f75aa32054f19a5ea2ce70ae30bfe4ff7cf2dbed70d556265df',\n *      'ckt1qyq93wzur9h9l6qwyk6d4dvkuufp6gvl08aszz5syl'\n *  );\n *  let tx_hash = await client.battle_win();\n */\n"]}